{"version":3,"sources":["Debts.js","NewExpense.js","UserPage.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Debts","_ref","loading","data","cancelDebt","react_default","a","createElement","Paper_default","Table_default","TableBody_default","map","row","TableRow_default","key","debtee","TableCell_default","component","scope","debteeName","align","style","color","amount","red","green","padding","IconButton_default","aria-label","onClick","Delete_default","Transition","props","Slide_default","Object","assign","direction","NewExpense","state","selected","description","handleToggle","value","_this","setState","indexOf","filter","v","concat","toConsumableArray","handleAmountChange","e","target","handleDescriptionChange","registerExpense","fetch","method","headers","Content-Type","body","JSON","stringify","beneficiaries","spender","then","response","json","console","log","handleClose","_this2","this","Dialog_default","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","fullScreen","AppBar_default","Toolbar_default","Close_default","Typography_default","variant","DialogContent_default","id","TextField_default","label","onChange","type","InputProps","startAdornment","InputAdornment_default","position","List_default","users","_ref2","name","_id","ListItem_default","dense","button","Checkbox_default","checked","tabIndex","disableRipple","ListItemText_default","primary","DialogActions_default","Button_default","disabled","length","React","Component","UserPage","debts","loadingDebts","newExpenseCallback","unselectUser","flexGrow","marginRight","marginLeft","ExitToApp_default","Fab_default","bottom","right","Add_default","randomColor","colors","pink","blue","teal","indigo","purple","Math","floor","random","HomePage","selectUser","Avatar_default","backgroundColor","substring","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadingUsers","userId","userName","createNewExpense","componentDidMount","storedUserId","localStorage","getItem","storedUserName","setItem","res","removeItem","Fragment","NewExpense_NewExpense","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c99898aa.chunk.js","sourcesContent":["import React from \"react\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Paper from \"@material-ui/core/Paper\"\nimport red from \"@material-ui/core/colors/red\"\nimport green from \"@material-ui/core/colors/green\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\n\nexport default ({ loading, data, cancelDebt }) => {\n    if (loading) return \"loading debts\"\n    else\n        return (\n            <Paper>\n                <Table>\n                    <TableBody>\n                        {data.map(row => (\n                            <TableRow key={row.debtee}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.debteeName}\n                                </TableCell>\n                                <TableCell\n                                    component=\"th\"\n                                    scope=\"row\"\n                                    align=\"center\"\n                                    style={{\n                                        color:\n                                            row.amount > 0\n                                                ? red[500]\n                                                : green[500],\n                                    }}\n                                >\n                                    {row.amount}\n                                </TableCell>\n                                <TableCell padding=\"dense\" align=\"right\">\n                                    <IconButton\n                                        aria-label=\"Delete\"\n                                        onClick={() => cancelDebt(row.debtee)}\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Paper>\n        )\n}\n","import React from \"react\"\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport TextField from \"@material-ui/core/TextField\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Slide from \"@material-ui/core/Slide\"\nimport Button from \"@material-ui/core/Button\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport AppBar from \"@material-ui/core/AppBar\"\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />\n}\n\nexport default class NewExpense extends React.Component {\n    state = {\n        selected: [],\n        amount: 0,\n        description: \"\",\n    }\n\n    handleToggle = value => () => {\n        this.setState(({ selected }) => {\n            if (selected.indexOf(value) !== -1)\n                return {\n                    selected: selected.filter(v => v !== value),\n                }\n            else\n                return {\n                    selected: [...selected, value],\n                }\n        })\n    }\n    handleAmountChange = e => this.setState({ amount: e.target.value })\n    handleDescriptionChange = e =>\n        this.setState({ description: e.target.value })\n    registerExpense = () => {\n        fetch(\"http://https://appartamento.herokuapp.com/expenses\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                beneficiaries: this.state.selected,\n                amount: this.state.amount,\n                description: this.state.description,\n                spender: this.props.spender,\n            }),\n        })\n            .then(response => response.json())\n            .then(console.log)\n\n        this.props.handleClose()\n    }\n\n    render() {\n        return (\n            <Dialog\n                open={this.props.open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={this.props.handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                fullScreen={true}\n            >\n                <AppBar>\n                    <Toolbar>\n                        <IconButton\n                            color=\"inherit\"\n                            onClick={this.props.handleClose}\n                            aria-label=\"Close\"\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                        <Typography variant=\"title\" color=\"inherit\">\n                            Register new expense\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogContent id=\"new-expense-content\">\n                    <TextField\n                        variant=\"outlined\"\n                        label=\"Description\"\n                        value={this.state.description}\n                        onChange={this.handleDescriptionChange}\n                    />\n                    <br />\n                    <br />\n                    <TextField\n                        variant=\"outlined\"\n                        label=\"Amount\"\n                        value={this.state.amount}\n                        onChange={this.handleAmountChange}\n                        type=\"number\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    €\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {/* <Typography variant=\"title\" gutterBottom>\n                        Who was this expense for?\n                    </Typography> */}\n                    <List>\n                        {this.props.users.map(({ name, _id }) => (\n                            <ListItem\n                                key={_id}\n                                dense\n                                button\n                                onClick={this.handleToggle(_id)}\n                            >\n                                <Checkbox\n                                    checked={\n                                        this.state.selected.indexOf(_id) !== -1\n                                    }\n                                    tabIndex={-1}\n                                    disableRipple\n                                />\n                                <ListItemText primary={name} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.props.handleClose}>Nevermind</Button>\n                    <Button\n                        onClick={this.registerExpense}\n                        color=\"primary\"\n                        disabled={\n                            !this.state.description ||\n                            !this.state.amount ||\n                            !this.state.selected.length\n                        }\n                    >\n                        Register\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n","import React from \"react\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Debts from \"./Debts\"\nimport Fab from \"@material-ui/core/Fab\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport ExitIcon from \"@material-ui/icons/ExitToApp\"\n\nexport default ({\n    name,\n    debts,\n    loadingDebts,\n    newExpenseCallback,\n    cancelDebt,\n    unselectUser,\n}) => (\n    <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography\n                    variant=\"h6\"\n                    color=\"inherit\"\n                    style={{ flexGrow: 1 }}\n                >\n                    Your Debts\n                </Typography>\n                <IconButton\n                    color=\"inherit\"\n                    aria-label=\"Backk\"\n                    style={{\n                        marginRight: -12,\n                        marginLeft: 20,\n                    }}\n                    onClick={unselectUser}\n                >\n                    <ExitIcon />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n        <div style={{ padding: \"16px\" }}>\n            <Debts\n                data={debts}\n                loading={loadingDebts}\n                cancelDebt={cancelDebt}\n            />\n            <Fab\n                color=\"primary\"\n                aria-label=\"Add\"\n                onClick={newExpenseCallback}\n                style={{ position: \"absolute\", bottom: \"16px\", right: \"16px\" }}\n            >\n                <AddIcon />\n            </Fab>\n        </div>\n    </div>\n)\n","import React from \"react\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport pink from \"@material-ui/core/colors/pink\"\nimport green from \"@material-ui/core/colors/green\"\nimport blue from \"@material-ui/core/colors/blue\"\nimport red from \"@material-ui/core/colors/red\"\nimport purple from \"@material-ui/core/colors/purple\"\nimport indigo from \"@material-ui/core/colors/indigo\"\nimport teal from \"@material-ui/core/colors/teal\"\n\nconst randomColor = () => {\n    const colors = [\n        pink[500],\n        green[500],\n        blue[500],\n        red[500],\n        teal[500],\n        indigo[500],\n        purple[500],\n    ]\n    const rand = Math.floor(Math.random() * colors.length)\n\n    return colors[rand]\n}\nexport default ({ users, selectUser }) => (\n    <div>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    Login\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        <List component=\"nav\">\n            {users.map(({ name, _id }) => (\n                <ListItem\n                    button\n                    key={name}\n                    onClick={() => selectUser({ name, _id })}\n                >\n                    <Avatar style={{ backgroundColor: randomColor() }}>\n                        {name.substring(0, 1)}\n                    </Avatar>\n                    <ListItemText primary={name} />\n                </ListItem>\n            ))}\n        </List>\n    </div>\n)\n","import React from \"react\"\nimport \"./App.css\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Debts from \"./Debts\"\nimport NewExpense from \"./NewExpense\"\nimport Fab from \"@material-ui/core/Fab\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport UserPage from \"./UserPage\"\nimport HomePage from \"./HomePage\"\n\nexport default class App extends React.Component {\n    state = {\n        loadingUsers: true,\n        loadingDebts: false,\n        users: [],\n        userId: null,\n        userName: null,\n        debts: [],\n        createNewExpense: false,\n    }\n\n    constructor(props) {\n        super(props)\n\n        fetch(\"http://https://appartamento.herokuapp.com/users\")\n            .then(res => res.json())\n            .then(users =>\n                this.setState({\n                    users,\n                    loadingUsers: false,\n                })\n            )\n    }\n\n    componentDidMount = () => {\n        const storedUserId = localStorage.getItem(\"userId\")\n        if (!!storedUserId) {\n            const storedUserName = localStorage.getItem(\"userName\")\n            this.selectUser({\n                name: storedUserName,\n                _id: storedUserId,\n            })\n        }\n    }\n\n    selectUser = ({ name, _id }) => {\n        localStorage.setItem(\"userId\", _id)\n        localStorage.setItem(\"userName\", name)\n\n        this.setState({\n            userId: _id,\n            userName: name,\n            loadingDebts: true,\n        })\n        fetch(`http://https://appartamento.herokuapp.com/users/${_id}/debts`)\n            .then(res => res.json())\n            .then(debts =>\n                this.setState({\n                    debts,\n                    loadingDebts: false,\n                })\n            )\n    }\n    unselectUser = () => {\n        localStorage.removeItem(\"userId\")\n        localStorage.removeItem(\"userName\")\n\n        this.setState({\n            userId: null,\n            userName: null,\n        })\n    }\n\n    cancelDebt = debtee => {\n        fetch(\n            `http://https://appartamento.herokuapp.com/users/${\n                this.state.userId\n            }/debts/${debtee}`,\n            {\n                method: \"DELETE\",\n            }\n        ).then(res => res.json())\n    }\n\n    render() {\n        if (this.state.loadingUsers) return \"loading\"\n        if (this.state.userId === null) {\n            return (\n                <HomePage\n                    users={this.state.users}\n                    selectUser={this.selectUser}\n                />\n            )\n        } else {\n            return (\n                <>\n                    <NewExpense\n                        users={this.state.users}\n                        open={this.state.createNewExpense}\n                        handleClose={() =>\n                            this.setState({\n                                createNewExpense: false,\n                            })\n                        }\n                        spender={this.state.userId}\n                    />\n                    <UserPage\n                        debts={this.state.debts}\n                        name={this.state.userName}\n                        users={this.state.users}\n                        cancelDebt={this.cancelDebt}\n                        unselectUser={this.unselectUser}\n                        newExpenseCallback={() =>\n                            this.setState({\n                                createNewExpense: true,\n                            })\n                        }\n                    />\n                </>\n            )\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}